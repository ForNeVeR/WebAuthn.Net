@{
    ViewData["Title"] = "Webauthn Passwordless";
    ViewData["ShowLogoutButton"] = false;
}

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">Passwordless Authentication</h2>
                <form id="webauthn-authenticate" class="p-1">
                    <div class="form-floating mb-1">
                        <input type="text" id="webauthn-authenticate-name" placeholder="Username" class="form-control mb-1"/>
                        <label for="webauthn-authenticate-name">Username</label>
                    </div>
                    <hr>
                    <button type="submit" id="webauthn-authenticate-submit" class="btn btn-primary">Submit</button>
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">Passwordless Authentication Options</h2>
                <form id="webauthn-params" class="p-1">
                    <div class="form-floating mb-2">
                        <select id="webauthn-params-uv" class="form-select">
                            <option value="unset">(not set)</option>
                            <option value="discouraged">Discouraged</option>
                            <option value="preferred">Preferred</option>
                            <option value="required">Required</option>
                        </select>
                        <label for="webauthn-params-uv">User Verification Requirement</label>
                    </div>
                    <div class="form-floating mb-2">
                        <select id="webauthn-params-attestation" class="form-select">
                            <option value="unset">(not set)</option>
                            <option value="none">None</option>
                            <option value="direct">Direct</option>
                            <option value="indirect">Indirect</option>
                            <option value="enterprise">Enterprise</option>
                        </select>
                        <label for="webauthn-params-attestation">Attestation Conveyance Preference</label>
                    </div>
                    <hr>
                    <button type="submit" id="webauthn-params-submit" class="btn btn-primary">Reset</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script async type="text/javascript">
(() => {
    const elements = {
        authenticateInput: () => document.getElementById("webauthn-authenticate-name"),
        authenticateButton: () => document.getElementById("webauthn-authenticate-submit")
    };
    const { initiateAuthentication, submitAuthentication } = API.Passwordless;
    const { getState } = createStateMethods({ key: localStateKeys.passwordlessParamsKey });

    const onAuthenticateButtonHandler = async (e) => {
        e.preventDefault();
        const username = getElementValue(elements.authenticateInput());
        const { userVerification, attestation } = getState();
        const initialData = await initiateAuthentication({ username, attestation, userVerification });
        if (!initialData) return;
        const { options } = initialData;
        const publicKey = {
            ...options,
            challenge: coerceToArrayBuffer(options.challenge),
            allowCredentials: (options.allowCredentials ?? []).map(x => ({...x,  id: coerceToArrayBuffer(x.id)}))
        };
        const response = await navigator.credentials.get({ publicKey });
        if (!response) return;

        const attestationResult = await submitAuthentication({ username, response });
        if (!attestationResult) return;
        const { successful } = attestationResult;
        if (!successful) {
            alert("Failed to register user");
            return;
        }
        location.assign("/Fido/Authenticated");
    };

    // INIT
    document.addEventListener("DOMContentLoaded", () => {
        if (!isWebauthnAvailable()) {
            alert("Browser doesn't support Webauthn API");
            return;
        }
        elements.authenticateButton().addEventListener("click", onAuthenticateButtonHandler);
    });
})();
</script>

    <script async type="text/javascript">
(() => {
    const defaultParams = {
        userVerification: "preferred",
        attestation: "none",
    };

    const {
        getState,
        setState,
        withState,
        resetState,
        ensureStateCreated
    } = createStateMethods({ key: localStateKeys.passwordlessParamsKey, defaultParams });

    const formElements = {
        userVerification: () => document.getElementById("webauthn-params-uv"),
        attestation: () => document.getElementById("webauthn-params-attestation"),
    };

    document.addEventListener("DOMContentLoaded", () => {
        // Ensure state is created
        ensureStateCreated();
        initializeForm({ state: getState(), setState, withState, formElements });
        document.getElementById("webauthn-params-submit").addEventListener("click", resetState);
    });
})();
</script>
}
