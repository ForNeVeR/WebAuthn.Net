@{
    ViewData["Title"] = "Webauthn.Net Usernameless";
    ViewData["ShowLogoutButton"] = false;
}

<div class="row">
    <div class="col-md-4"></div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">Usernameless Authentication</h2>
                <form id="webauthn-authenticate" class="p-1">
                    <hr>
                    <button type="submit" id="webauthn-usernameless-submit" class="btn btn-primary">Submit</button>
                    <button type="button" id="webauthn-usernameless-register" class="btn btn-primary">Register</button>
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-4"></div>
</div>

@section Scripts
{
<script async type="text/javascript">
(() => {
    const { initiateAuthentication, initiateRegistration, submitAuthentication, submitRegistration } = API.Usernameless;
    const elements = {
        authenticateBtn: () => document.getElementById("webauthn-usernameless-submit"),
        registerBtn: () => document.getElementById("webauthn-usernameless-register"),
    }
    // DOM Handlers
    const onRegisterButtonHandler = async (e) => {
        e.preventDefault();
        const initialData = await initiateRegistration();
        if (!initialData) return;
        const { options } = initialData;
        const publicKey = {
            ...options,
            challenge: coerceToArrayBuffer(options.challenge),
            user: {
                ...options.user,
                id: coerceToArrayBuffer(options.user.id),
            }
        };

        const response = await navigator.credentials.create({ publicKey });
        if (!response) return;

        const registrationResult = await submitRegistration({ response });
        if (!registrationResult) return;
        const { successful } = registrationResult;
        if (successful) {
            Alerts.registerSuccess();
            return;
        }
        Alerts.failedToRegister();
    };
    const onAuthenticateButtonHandler = async (e) => {
        e.preventDefault();
        const initialData = await initiateAuthentication();
        if (!initialData) return;
        const { options } = initialData;
        const publicKey = {
            ...options,
            challenge: coerceToArrayBuffer(options.challenge),
            allowCredentials: (options.allowCredentials ?? []).map(x => ({...x,  id: coerceToArrayBuffer(x.id)}))
        };
        const response = await navigator.credentials.get({ publicKey });
        if (!response) return;

        const attestationResult = await submitAuthentication({ response });
        if (!attestationResult) return;
        const { successful } = attestationResult;
        if (!successful) {
            Alerts.failedToAuthenticate();
            return;
        }
        location.assign("/Fido/Authenticated");
    };

    // INIT
    document.addEventListener("DOMContentLoaded", () => {
        if (!isWebauthnAvailable()) {
            Alerts.webauthnIsNotAvailable();
            return;
        }

        elements.registerBtn().addEventListener("click", onRegisterButtonHandler);
        elements.authenticateBtn().addEventListener("click", onAuthenticateButtonHandler);
    });
})();
</script>
}

