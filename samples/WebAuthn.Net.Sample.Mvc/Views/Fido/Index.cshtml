@{
    ViewData["Title"] = "Fido Register/Authentication";
    ViewData["ShowLogoutButton"] = false;
}

<div class="mui-panel">
    <h2>Register</h2>
    <form id="webauthn-register" class="mui-form">
        <div class="mui-textfield">
            <input type="text" id="webauthn-register-name" placeholder="Username"/>
        </div>
        <button type="submit" id="webauthn-register-submit" class="mui-btn mui-btn--primary mui-btn--raised">Register</button>
    </form>
</div>


<div class="mui-panel">
    <h2>Authenticate</h2>
    <form id="webauthn-authenticate" class="mui-form">
        <div class="mui-textfield">
            <input type="text" id="webauthn-authenticate-name" placeholder="Username" />
        </div>
        <button type="submit" id="webauthn-authenticate-submit" class="mui-btn mui-btn--primary">Login</button>
    </form>
 </div>

<script type="text/javascript">
// Utils
const coerceToArrayBuffer = (x) => {
    const fix = x.replace(/-/g, "+").replace(/_/g, "/");
    return Uint8Array.from(window.atob(fix), c => c.charCodeAt(0));
};
const coerceToBase64Url = (x) => {
    const str = new Uint8Array(x).reduce((acc, x) => acc += String.fromCharCode(x), "");
    return window.btoa(str).replace(/\+/g, "-").replace(/\//g, "_").replace(/=*$/g, "");
};
const getRegisterUsernameInputValue = () => document.getElementById("webauthn-register-name")?.value;
const getAuthenticateUsernameInputValue = () => document.getElementById("webauthn-authenticate-name")?.value;
const makeJsonApiCall = async ({url, data, method}) => {
    const response = await fetch(url, {
        method,
        body: JSON.stringify(data),
        credentials: "same-origin",
        headers: {
            "content-type": "application/json"
        }
    });

    if (response.ok) {
        return await response.json();
    }

    alert(await response.text());
    return undefined;
};
const isWebauthnAvailable = () => {
    const missingWebauthnApis = window.PublicKeyCredential === undefined
    || typeof window.PublicKeyCredential !== "function"
    || typeof window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable !== "function";

    return window.isSecureContext && !missingWebauthnApis;
};

// API
const initiateRegistration = async () => {
    const username = getRegisterUsernameInputValue();
    const url = "/Fido/BeginRegisterCeremony";
    const data = {
        username,
        extensions: {}
    };
    return await makeJsonApiCall({ url, data, method: "POST" });
};
const submitRegistration = async ({ response }) => {
    const url = "/Fido/RegisterCeremony";
    const data = {
        id: coerceToBase64Url(response.rawId),
        type: response.type,
        response: {
            attestationObject: coerceToBase64Url(response.response.attestationObject),
            clientDataJson: coerceToBase64Url(response.response.clientDataJSON)
        }
    };
    return await makeJsonApiCall({ url, data, method: "POST" });
};
const initiateAuthentication = async ({ username }) => {
    const url = "/Fido/BeginAuthenticationCeremony";
    const data = {
        username,
    };
    return await makeJsonApiCall({ url, data, method: "POST" });
};
const submitAttestation = async ({ username, response }) => {
    const url = "/Fido/AuthenticationCeremony";
    const data = {
        id: coerceToBase64Url(response.rawId),
        username,
        type: response.type,
        extensions: response.getClientExtensionResults(),
        response: {
            userHandle: coerceToBase64Url(response.response.userHandle),
            authenticatorData: coerceToBase64Url(response.response.authenticatorData),
            clientDataJSON: coerceToBase64Url(response.response.clientDataJSON),
            signature: coerceToBase64Url(response.response.signature),
        }
    }
    return await makeJsonApiCall({ url, data, method: "POST" });
};

// DOM Handlers
const onRegisterButtonHandler = async (e) => {
    e.preventDefault();
    const initialData = await initiateRegistration();
    if (!initialData) return;
    const { options } = initialData;
    const publicKey = {
        ...options,
        challenge: coerceToArrayBuffer(options.challenge),
        user: {
            ...options.user,
            id: coerceToArrayBuffer(options.user.id),
        },
        authenticatorSelection: {
            userVerification: "preferred"
        }
    };

    const response = await navigator.credentials.create({ publicKey });
    if (!response) return;

    const registrationResult = await submitRegistration({ response });
    if (!registrationResult) return;
    const { successful } = registrationResult;
    if (successful) {
        alert("User registered!");
        return;
    }

    alert("Failed to register user");
};
const onAuthenticateButtonHandler = async (e) => {
    e.preventDefault();
    const username = getAuthenticateUsernameInputValue();
    const initialData = await initiateAuthentication({ username });
    if (!initialData) return;
    const { options } = initialData;
    const publicKey = {
        ...options,
        challenge: coerceToArrayBuffer(options.challenge),
        allowCredentials: (options.allowCredentials ?? []).map(x => ({...x,  id: coerceToArrayBuffer(x.id)}))
    };
    const response = await navigator.credentials.get({ publicKey });
    if (!response) return;

    const attestationResult = await submitAttestation({ username, response });
    if (!attestationResult) return;
    const { successful } = attestationResult;
    if (!successful) {
        alert("Failed to register user");
        return;
    }
    location.assign("/Fido/Authenticated");
};

// INIT
document.addEventListener("DOMContentLoaded", () => {
    if (!isWebauthnAvailable()) {
        alert("Browser doesn't support Webauthn API");
        return;
    }

    const registerButton = document.getElementById("webauthn-register-submit");
    const authenticateButton = document.getElementById("webauthn-authenticate-submit");

    registerButton.addEventListener("click", onRegisterButtonHandler);
    authenticateButton.addEventListener("click", onAuthenticateButtonHandler);
});
</script>
