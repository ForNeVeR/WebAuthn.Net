@{
    ViewData["Title"] = "Webauthn.Net Register";
    ViewData["ShowLogoutButton"] = false;
}

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">Register</h2>
                <form id="webauthn-register" class="p-1">
                    <div class="form-floating mb-1">
                        <input type="text" id="webauthn-register-name" class="form-control" placeholder="Username"/>
                        <label for="webauthn-register-name">Username</label>
                    </div>
                    <hr>
                    <button type="submit" id="webauthn-register-submit" class="btn btn-primary">Submit</button>
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">Register Options</h2>
                <form id="webauthn-params" class="p-1">
                    <div class="form-floating mb-2">
                        <select id="webauthn-params-uv" class="form-select">
                            <option value="unset">(not set)</option>
                            <option value="discouraged">Discouraged</option>
                            <option value="preferred">Preferred</option>
                            <option value="required">Required</option>
                        </select>
                        <label for="webauthn-params-uv">User Verification Requirement</label>
                    </div>
                    <div class="form-floating mb-2">
                        <select id="webauthn-params-attachment" class="form-select">
                            <option value="unset">(not set)</option>
                            <option value="platform">Platform</option>
                            <option value="cross-platform">Cross-Platform</option>
                        </select>
                        <label for="webauthn-params-attachment">Authenticator Attachment</label>
                    </div>
                    <div class="form-floating mb-2">
                        <select id="webauthn-params-discoverable" class="form-select">
                            <option value="unset">(not set)</option>
                            <option value="discouraged">Discouraged</option>
                            <option value="preferred">Preferred</option>
                            <option value="required">Required</option>
                        </select>
                        <label for="webauthn-params-discoverable">Discoverable Credential</label>
                    </div>
                    <div class="form-floating mb-2">
                        <select id="webauthn-params-attestation" class="form-select">
                            <option value="unset">(not set)</option>
                            <option value="none">None</option>
                            <option value="direct">Direct</option>
                            <option value="indirect">Indirect</option>
                            <option value="enterprise">Enterprise</option>
                        </select>
                        <label for="webauthn-params-attestation">Attestation Conveyance Preference</label>
                    </div>
                    <div class="form-floating mb-2">
                        <select id="webauthn-params-rkey" class="form-select">
                            <option value="unset">(not set)</option>
                            <option value="discouraged">Discouraged</option>
                            <option value="preferred">Preferred</option>
                            <option value="required">Required</option>
                        </select>
                        <label for="webauthn-params-rkey">Resident Key Requirement</label>
                    </div>
                    <hr>
                    <button type="submit" id="webauthn-params-submit" class="btn btn-primary">Reset</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script async type="text/javascript">
(() => {
    // Utils
    const { getState } = createStateMethods({ key: localStateKeys.registrationParamsKey, defaultParams: {} });
    const { initiateRegistration, submitRegistration } = API.Register;
    const elements = {
        registerInput: () => document.getElementById("webauthn-register-name"),
        registerButton: () => document.getElementById("webauthn-register-submit")
    };

    // DOM Handlers
    const onRegisterButtonHandler = async (e) => {
        e.preventDefault();
        const registrationParameters = getState();
        const username = getElementValue(elements.registerInput())
        const initialData = await initiateRegistration({ registrationParameters, username });
        if (!initialData) return;
        const { options } = initialData;
        const publicKey = {
            ...options,
            challenge: coerceToArrayBuffer(options.challenge),
            user: {
                ...options.user,
                id: coerceToArrayBuffer(options.user.id),
            }
        };

        const response = await navigator.credentials.create({ publicKey });
        if (!response) return;

        const registrationResult = await submitRegistration({ response });
        if (!registrationResult) return;
        const { successful } = registrationResult;
        if (successful) {
            alert("User registered!");
            clearElementValue(elements.registerInput());
            return;
        }

        alert("Failed to register user");
    };

    // INIT
    document.addEventListener("DOMContentLoaded", () => {
        if (!isWebauthnAvailable()) {
            alert("Browser doesn't support Webauthn API");
            return;
        }
        elements.registerButton().addEventListener("click", onRegisterButtonHandler);
    });
})();
</script>
    <script async type="text/javascript">
(() => {
    const defaultParams = {
        userVerification: "preferred",
        attachment: "unset",
        discoverableCredential: "unset",
        attestation: "none",
        residentKey: "unset",
    };

    const formElements = {
        userVerification: () => document.getElementById("webauthn-params-uv"),
        attachment: () => document.getElementById("webauthn-params-attachment"),
        discoverableCredential: () => document.getElementById("webauthn-params-discoverable"),
        attestation: () => document.getElementById("webauthn-params-attestation"),
        residentKey: () => document.getElementById("webauthn-params-rkey")
    };

    const {
        getState,
        setState,
        resetState,
        withState,
        ensureStateCreated
    } = createStateMethods({ key: localStateKeys.registrationParamsKey, defaultParams })

    document.addEventListener("DOMContentLoaded", () => {
        ensureStateCreated();
        initializeForm({ state: getState(), setState, withState, formElements });
        document.getElementById("webauthn-params-submit").addEventListener("click", resetState);
    });
})();
</script>
}

